#include "myplcmodel.h"



/*********************************************************************************************
 *  M O D E L
*********************************************************************************************/



MyPlcModel::MyPlcModel( QObject *parent)
    : QAbstractItemModel(parent)
{

    /*
    QVector<QVariant> rootData;
    rootData.append(QString("Modulo/Porta"));
    rootData.append(QString("[No header]"));
    rootData.append(QString("[No header]"));
    */

    itemdata_t dev;
    dev.type = DEVICE;
    dev.alias = "unset device";
    dev.device.hardware = 0;
    dev.enable = false;

    m_root = new myplcItem(dev);


    //model->setHeaderData(column, Qt::Horizontal, QVariant("[No header]"), Qt::EditRole);
    //emit headerDataChanged(Qt::Horizontal, 0, 2);
    //buildItems();
}



MyPlcModel::~MyPlcModel()
{
    delete m_root;
}


QVariant MyPlcModel::data(const QModelIndex &index, int role) const
{
    qDebug() << QString("row %1, col%2, role %3").arg(index.row()).arg(index.column()).arg(role);

    if (index.isValid())

    switch (role) {

    case Qt::DisplayRole:

        return (getItem(index)->data(index.column()).toString()  );

    case Qt::EditRole:

        return (getItem(index)->data(index.column()));

    case Qt::FontRole:
       /* if (row == 0 && col == 0) { //change font only for cell(0,0)
            QFont boldFont;
            boldFont.setBold(true);
            return boldFont;
        }*/
        break;
    case Qt::BackgroundRole:
      /*  if (row == 1 && col == 2)  //change background only for cell(1,2)
            return QBrush(Qt::red);
        break; */
    case Qt::TextAlignmentRole:
       /* if (row == 1 && col == 1) //change text alignment only for cell(1,1)
            return Qt::AlignRight + Qt::AlignVCenter;*/
        break;
    case Qt::CheckStateRole:
   /*     if (row == 1 && col == 0) //add a checkbox to cell(1,0)
            return Qt::Checked; */
        break;
    }
    return QVariant();
}


bool MyPlcModel::setData(const QModelIndex &index, const QVariant &value, int role)
{
    if (role != Qt::EditRole)
        return false;

    myplcItem *item = getItem(index);
    bool result = item->setData(index.column(), value);

    if (result)
        emit dataChanged(index, index, {Qt::DisplayRole, Qt::EditRole});

    return result;
}


QVariant MyPlcModel::headerData(int section, Qt::Orientation orientation, int role) const
{
      // if (orientation == Qt::Horizontal && role == Qt::DisplayRole)
      // return m_sections.at(section);
    if (role == Qt::DisplayRole && orientation == Qt::Horizontal) {
            switch (section) {
            case 0:
                return QString("first");
            case 1:
                return QString("second");
            case 2:
                return QString("third");
            }
        }
        return QVariant();

}


bool MyPlcModel::setHeaderData(int section, Qt::Orientation orientation, const QVariant &value, int role)
{
    if (role != Qt::EditRole || orientation != Qt::Horizontal)
        return false;

     m_sections.insert(section, value.toString());
     emit headerDataChanged(orientation, section, section);
    return true;
}



int MyPlcModel::rowCount(const QModelIndex &parent) const
{
    const myplcItem *parentItem = getItem(parent);

    return parentItem ? parentItem->childCount() : 0;
}

int MyPlcModel::columnCount(const QModelIndex &parent) const
{
    Q_UNUSED(parent)
    return m_sections.count();
}


Qt::ItemFlags MyPlcModel::flags(const QModelIndex &index) const
{
    if (!index.isValid())
        return Qt::NoItemFlags;
    //Returning Qt::ItemIsSelectable | Qt::ItemIsEditable | Qt::ItemIsEnabled is enough to show an editor that a cell can be selected.
    
    return Qt::ItemIsEditable | QAbstractItemModel::flags(index);
}


QModelIndex MyPlcModel::index(int row, int column, const QModelIndex &parent) const
{
     if (parent.isValid() && parent.column() != 0)
         return QModelIndex();

     myplcItem *parentItem = getItem(parent);
     if (!parentItem)
         return QModelIndex();

     myplcItem *childItem = parentItem->child(row);

     if (childItem)
         return createIndex(row, column, childItem);

     return QModelIndex();
}



QModelIndex MyPlcModel::parent(const QModelIndex &index) const
{
    if (!index.isValid())
        return QModelIndex();

    myplcItem *childItem = getItem(index);

    myplcItem *parentItem = childItem ? childItem->parent() : nullptr;

    if (parentItem == m_root || !parentItem)
        return QModelIndex();

    return createIndex(parentItem->row(), 0, parentItem);   // childNumber() -- row()
}




myplcItem *MyPlcModel::getItem(const QModelIndex &index) const
{
    if (index.isValid()) {
        myplcItem *item = static_cast<myplcItem*>(index.internalPointer());
        if (item)
            return item;
    }
    return m_root;
}




// ---------------------------------------------------------------------------------------
// Implements MyPlc specific
// ---------------------------------------------------------------------------------------




void MyPlcModel::buildItems()
{
 // *********** Bind myplc on items ??????

}



bool MyPlcModel::syncItem(const itemdata_t &opt)
{
    myplcItem *item = new myplcItem(opt);
    switch ( opt.type ) {

       case DEVICE:
              // Single device !
              m_root->setData(opt);
              //we identify the top left cell
              //QModelIndex topLeft = createIndex(0,0);
              //emit a signal to make the view reread identified data
              //emit dataChanged(topLeft, topLeft, {Qt::DisplayRole});
            break;

       case MODULE:
              // Search module
                // No found ? Add module
                // InsertRow()
              m_root->appendChild(item);
              return (true);

       case PORT:
             // Search module same idx
               // No found ? Error
              m_root->child(opt.port.imod)->appendChild(item);
              return (true);

       case RULE:
              m_rules->appendChild(item);
              return (true);

            break;

    }  // end-switch
    return (false);
}





/*
void MyPlcModel::setDeviceInfo(const vs_info_t &info)
{

}

void MyPlcModel::getDeviceInfo(vs_info_t *info)
{

}





bool MyPlcModel::setModule(const vs_module_t &module)
{
   bool addmodule = true;
   int i = 0;
   if ( ! m_root->childCount() )
   {
    while( i<m_root->childCount() && !( m_root->child(i)->data(I_TYPE) == module.mtype && m_root->child(i)->data(IE_ADDR) == module.maddr )) {i++;}
    if ((m_root->data(I_TYPE) == module.mtype && m_root->data(IE_ADDR) == module.maddr ) ) addmodule = false;
   }
  if (addmodule) // Add module
  {
     MyPlcItem *newmodule = new MyPlcItem(module,m_root);
     m_root->appendChild(newmodule);
  }
  else  // update fields
  {
  //  m_root->child(i)->setData(IM_IDX) = module.idx;
  }
  return(true);
}

bool MyPlcModel::setPort(vs_port_t &port)
{
      return(true);
}


//int nRules();
bool MyPlcModel::setRule(vs_rule_t &rule )
{
      return(true);
}
//vs_rule_t getRule(idx_t iport);


//bool rebuildIdx();





/* Use delegate



bool Item::insertChildren(int position, int count, int column)
 {
     if (position < 0 || position > m_childs.size())
         return false;

     for (int row = 0; row < count; ++row) {
         QVector<QVariant> data(column);
         Item *item = new Item(data, this);
         m_childs.insert(position, item);
     }

     return true;
 }


bool Item::removeChildren(int position, int count)
  {
      if (position < 0 || position + count > m_childs.size())
          return false;

      for (int row = 0; row < count; ++row)
          delete m_childs.takeAt(position);

      return true;
  }
*/





/*

bool MyPlcModel::loadData(QDataStream *in)
{
    //QDataStream stream(device);
    int rowCount, columnCount;
   stream >> rowCount;
    stream >> columnCount;

    for(int row = 0; row < rowCount; row++)
        for(int column = 0; column < columnCount; column++) {
            QString item;
            stream >> item;
          //  model->setItem(row, column, item);
        }
    return (true);
}

bool MyPlcModel::saveData(QDataStream *out)
{
   // QDataStream stream(device);
   int rowCount =   rowCount(); // model->rowCount();
    int columnCount = model->columnCount();
    stream << rowCount;
    stream << columnCount;

    for(int row = 0; row < rowCount; row++)
        for(int column = 0; column < columnCount; column++) {
            stream << model->item(row, column)->text();
        }
      return (true);
}

*/





/*

void loadModel(QIODevice *device, QStandardItemModel *model)
{
    QDataStream stream(device);
    int rowCount, columnCount;
    stream >> rowCount;
    stream >> columnCount;

    for(int row = 0; row < rowCount; row++)
        for(int column = 0; column < columnCount; column++) {
            QString item;
            stream >> item;
            model->setItem(row, column, item);
        }
}

void saveModel(QIODevice *device, QStandardItemModel *model)
{
    QDataStream stream(device);
    int rowCount = model->rowCount();
    int columnCount = model->columnCount();
    stream << rowCount;
    stream << columnCount;

    for(int row = 0; row < rowCount; row++)
        for(int column = 0; column < columnCount; column++) {
            stream << model->item(row, column)->text();
        }
}

...

QStandardItemModel myModel;

QFile file;
if(file.open(QIODevice::WriteOnly))
    saveModel(&file, &myModel);
 */






/*  ______________________________________________________________________
MyPlcTree::MyPlcTree(QWidget *parent)
    : QTreeWidget(parent)
    //  m_root(new QTreeWidgetItem())
{
    //addTopLevelItem(m_root);
    //invisibleRootItem();

}


void MyPlcTree::Inizialize() {

    QStringList labels;
    labels << tr("Porta(Morsetto)") << tr("Dir") << tr("Tipo");
    setHeaderLabels(labels);
    //header()->setSectionResizeMode(QHeaderView::Stretch);
    setWordWrap(true);

    ic_enabled.addPixmap(QPixmap("/images/enabled.png"), QIcon::Normal, QIcon::On);
    ic_enabled.addPixmap(QPixmap("/images/disabled.png"), QIcon::Normal, QIcon::Off);
}



void MyPlcTree::setMyPlc(MyPlc *myplc)
{
  l_myplc = myplc;
}



void MyPlcTree::reloadItems()
{
    int i,j;
    QTreeWidgetItem *pmod = nullptr;
    clear();

    for( i=0; i< l_myplc->device.nModules; i++ )                    // Modules & Ports
    {
        pmod = addItemModule(&(l_myplc->device.modules[i]));       // Add module
        for ( j=0; j<l_myplc->device.modules[i].nports;j++ )        // Module's In ports
        {
          addItemPort(pmod,&(l_myplc->device.modules[i].ports[j]));
        }
    }
}



QTreeWidgetItem* MyPlcTree::addItemModule(v_module_t *module)
{
    QTreeWidgetItem *myplcModule = new QTreeWidgetItem();

    myplcModule->setText(0, QString(module->malias) + QString(" (%1)").arg(module->addr) );
    addTopLevelItem(myplcModule);

 return (myplcModule);
}

void MyPlcTree::addItemPort(QTreeWidgetItem *module, v_port_t *port)
{
    QTreeWidgetItem *newPort = new QTreeWidgetItem();

    newPort->setIcon(0,(port->enabled)?QIcon(":/images/enabled.png"):QIcon(":/images/disabled.png"));
    newPort->setText(1, QString(port->palias) );
    newPort->setText(2, tr((port->io)?"In":"Out"));
    newPort->setText(3, QString(port->subaddr));
    newPort->setFlags(newPort->flags() | Qt::ItemIsEditable);
    //myplcPort->setFlags(Qt::ItemFlag(colorCount()));
    //myplcPort->setBackground(0, Qt::red );
    module->addChild(newPort);
}

void MyPlcTree::addItemRule(flag_t rl, idx_t pin, idx_t pout)
{

};



void MyPlcTree::updatePort(v_module_t *module, const QModelIndex &index)
{
 int i =0;

};

void MyPlcTree::updateModule()
{


};
void MyPlcTree::updateRule()
{


};


*/
